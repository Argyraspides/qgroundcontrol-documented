classDiagram
    class QGCApplication {
        -QGCToolbox
    }

    class QGCToolbox {
        #QGCApplication
        -LinkManager* _linkManager
        -MAVLinkProtocol* _mavlinkProtocol
        -MultiVehicleManager* _multiVehicleManager
        -VideoManager* _videoManager
        -SettingsManager* _settingManager
        -QGCCorePlugin* _corePlugin
    }

    class QGCCorePlugin {
        +QGCOptions* options
        +QmlObjectListModel* customMapItems
        +bool showAdvancedUI
        
        +mavlinkMessage(vehicle, link, message)
        +createVideoReceiver(parent)
        +adjustSettingMetaData(settingsGroup, metaData)
        +preSaveToMissionJson(controller, json)
        +postSaveToMissionJson(controller, json)
    }
    <<abstract>> QGCCorePlugin

    class LinkManager {
        #QGCToolbox
        #QGCApplication
        -MAVLinkProtocol
        -UdpIODevice
        +createConnectedLink()
        +disconnectAll()

    }

    class MultiVehicleManager {
        #QGCToolbox
        #QGCApplication
        -activeVehicle
        -MAVLinkProtocol
        +lastKnownLocation()
        +setActiveVehicle()
        -deleteVehicle()
        +vehicles()
        +vehicleAdded() SIGNAL
        +vehicleRemoved() SIGNAL
    }

    class Vehicle {
        -int id
        -MAV_AUTOPILOT firmwareType
        -MAV_TYPE vehicleType
        -bool armed
        -QGeoCoordinate coordinate
        -QString flightMode
        
        -MissionManager* missionManager
        -ParameterManager* parameterManager
        -VehicleLinkManager* vehicleLinkManager
        -GeoFenceManager* geoFenceManager
        +QGCCameraManager* cameraManager
        
        +guidedModeLand()
        +guidedModeTakeoff()
        +startMission()
        
        +mavlinkMessageReceived() SIGNAL
    }

    class Joystick {
        #MultiVehicleManager
        #Vehicle* activeVehicle
    }

    class MAVLinkProtocol {
        -LinkManager
        -MultiVehicleManager
        #mavlink_message_t
        +receiveBytes()

    }

    class MissionManager {

    }

    class ParameterManager {
    
    }

    class RallyPointManager {

    }

    class VehicleLinkManager {

    }

    class GeoFenceManager {

    }

    class JoystickManager {
        -Joystick* activeJoystick 
        activeJoystickChanged() SIGNAL
    }

    class SettingsManager {
        #QGCToolbox
        #QGCApplication
        -VideoSettings* videoSettings
        -FlightModeSettings* flightModeSettings
        -MapsSettings* mapSettings 

    }

    class FirmwarePluginManager {
        -FirmwarePlugin* genericFirmwarePlugin
        -FirmwarePluginFactory findPluginFactory()
    }

    class FirmwarePlugin {
        +initializeVehicle(Vehicle* vehicle)
        +isCapable(Vehicle* vehicle, FirmwareCapabilities capabilities)
        +flightMode()
        +setFlightMode()
    }
    <<abstract>> FirmwarePlugin

    class AutoPilotPlugin {

    }

    class FTPManager {
    }

    class VideoManager {
        #QGCToolbox
        #QGCApplication
        #Vehicle* activeVehicle
        #VideoReceiver* receiver
    }

    class LogDownloadManager {
    }

    class GPSManager {
        GPSRtk* gpsRtk
    }

    class GPSRtk {
        -GPSProvider* gpsProvider
        +connectGPS()
        +disconnectGPS()
        +satelliteInfoUpdate()
    }

    class GPSProvider {
        satelliteInfoUpdate() SIGNAL
        sensorGpsUpdate() SIGNAL
        -run()
    }

    class VideoReceiver {
        +struct FILE_FORMAT
        +startDecoding()
        +startRecording()
        +start()
        +stop()
    }
    <<abstract>> VideoReceiver

    QGCApplication -- QGCToolbox
    QGCToolbox <--> LinkManager
    QGCToolbox <--> MultiVehicleManager
    QGCToolbox <--> SettingsManager
    QGCToolbox <--> FirmwarePluginManager
    QGCToolbox <--> JoystickManager
    QGCToolbox <--> VideoManager
    QGCToolbox <--> QGCCorePlugin

    MultiVehicleManager --> Vehicle
    Vehicle --> MAVLinkProtocol
    Vehicle --> MissionManager
    Vehicle --> ParameterManager
    Vehicle --> AutoPilotPlugin
    Vehicle --> FTPManager
    Vehicle --> LogDownloadManager
    Vehicle --> GeoFenceManager
    Vehicle --> VehicleLinkManager
    Vehicle --> RallyPointManager

    LinkManager <--> MAVLinkProtocol
    MAVLinkProtocol <--> MultiVehicleManager

    JoystickManager --> Joystick


    Joystick --> Vehicle
    Joystick --> MultiVehicleManager

    VideoManager --> VideoReceiver

    FirmwarePluginManager --> FirmwarePlugin

    GPSManager --> GPSRtk

    GPSRtk --> GPSProvider

    note for QGCApplication "Main application class<br/>Initializes all core components"
    note for Vehicle "Represents single vehicle and <br/>handles vehicle-specific operations.<br/>All functions for vehicle control, e.g.<br/>takeoff, are MAVLink specific"
    note for MAVLinkProtocol "Handles MAVLink message<br/>processing and routing<br/>Only one instance running through the entire app (singleton)<br/>Gets raw data from the LinkManager<br/>and converts them into MAVLink messages"
    note for MultiVehicleManager "Manages multiple vehicle<br/>instances and coordination"
    note for LinkManager "Manages all links, e.g., UDP links<br/> TCP links, etc"
    note for JoystickManager "Only one joystick can be used at a time,<br/>but multiple can be connected.<br/>Each joystick runs on its own thread"
    note for Joystick "Needs MultiVehicleManager to know what the current active vehicle is?"
    note for VideoManager "Has a list of VideoReceivers -- max of two in vanilla QGC"
    note for SettingsManager "Quite literally just a container for all application settings. Instantiates all of them, too<br/>(instantiation function setToolbox() called from QGCToolBox)"
    note for FirmwarePluginManager "QGC supports vehicles with any arbitrary firmware. Modules for firmware and a factory class to make them must be written"
    note for QGCCorePlugin "Make your own instance of a QGCCorePlugin to customize and extend QGC functionality.<br/>E.g., override createVideoReceiver() for custom video stream handling,<br/>or use mavlinkMessage() to inspect all mavlink traffic"
